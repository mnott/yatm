// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "file.proto" (package "file", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message file.File
 */
export interface File {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 parent_id = 2;
     */
    parentId: bigint;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 mode = 17;
     */
    mode: bigint;
    /**
     * @generated from protobuf field: int64 mod_time = 18;
     */
    modTime: bigint;
    /**
     * @generated from protobuf field: int64 size = 19;
     */
    size: bigint;
    /**
     * @generated from protobuf field: bytes hash = 20;
     */
    hash: Uint8Array;
}
/**
 * @generated from protobuf message file.EditedFile
 */
export interface EditedFile {
    /**
     * @generated from protobuf field: optional int64 parent_id = 2;
     */
    parentId?: bigint;
    /**
     * @generated from protobuf field: optional string name = 3;
     */
    name?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class File$Type extends MessageType<File> {
    constructor() {
        super("file.File", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "parent_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "mod_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<File>): File {
        const message = { id: 0n, parentId: 0n, name: "", mode: 0n, modTime: 0n, size: 0n, hash: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: File): File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 parent_id */ 2:
                    message.parentId = reader.int64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* int64 mode */ 17:
                    message.mode = reader.int64().toBigInt();
                    break;
                case /* int64 mod_time */ 18:
                    message.modTime = reader.int64().toBigInt();
                    break;
                case /* int64 size */ 19:
                    message.size = reader.int64().toBigInt();
                    break;
                case /* bytes hash */ 20:
                    message.hash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 parent_id = 2; */
        if (message.parentId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.parentId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* int64 mode = 17; */
        if (message.mode !== 0n)
            writer.tag(17, WireType.Varint).int64(message.mode);
        /* int64 mod_time = 18; */
        if (message.modTime !== 0n)
            writer.tag(18, WireType.Varint).int64(message.modTime);
        /* int64 size = 19; */
        if (message.size !== 0n)
            writer.tag(19, WireType.Varint).int64(message.size);
        /* bytes hash = 20; */
        if (message.hash.length)
            writer.tag(20, WireType.LengthDelimited).bytes(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message file.File
 */
export const File = new File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditedFile$Type extends MessageType<EditedFile> {
    constructor() {
        super("file.EditedFile", [
            { no: 2, name: "parent_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EditedFile>): EditedFile {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditedFile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditedFile): EditedFile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 parent_id */ 2:
                    message.parentId = reader.int64().toBigInt();
                    break;
                case /* optional string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditedFile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 parent_id = 2; */
        if (message.parentId !== undefined)
            writer.tag(2, WireType.Varint).int64(message.parentId);
        /* optional string name = 3; */
        if (message.name !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message file.EditedFile
 */
export const EditedFile = new EditedFile$Type();
