// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "position.proto" (package "position", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message position.Position
 */
export interface Position {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 file_id = 2;
     */
    fileId: bigint;
    /**
     * @generated from protobuf field: int64 tape_id = 3;
     */
    tapeId: bigint;
    /**
     * @generated from protobuf field: string path = 4;
     */
    path: string;
    /**
     * @generated from protobuf field: int64 mode = 17;
     */
    mode: bigint;
    /**
     * @generated from protobuf field: int64 mod_time = 18;
     */
    modTime: bigint;
    /**
     * @generated from protobuf field: int64 write_time = 19;
     */
    writeTime: bigint;
    /**
     * @generated from protobuf field: int64 size = 20;
     */
    size: bigint;
    /**
     * @generated from protobuf field: bytes hash = 21;
     */
    hash: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class Position$Type extends MessageType<Position> {
    constructor() {
        super("position.Position", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "file_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "tape_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "mod_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "write_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Position>): Position {
        const message = { id: 0n, fileId: 0n, tapeId: 0n, path: "", mode: 0n, modTime: 0n, writeTime: 0n, size: 0n, hash: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Position>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Position): Position {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 file_id */ 2:
                    message.fileId = reader.int64().toBigInt();
                    break;
                case /* int64 tape_id */ 3:
                    message.tapeId = reader.int64().toBigInt();
                    break;
                case /* string path */ 4:
                    message.path = reader.string();
                    break;
                case /* int64 mode */ 17:
                    message.mode = reader.int64().toBigInt();
                    break;
                case /* int64 mod_time */ 18:
                    message.modTime = reader.int64().toBigInt();
                    break;
                case /* int64 write_time */ 19:
                    message.writeTime = reader.int64().toBigInt();
                    break;
                case /* int64 size */ 20:
                    message.size = reader.int64().toBigInt();
                    break;
                case /* bytes hash */ 21:
                    message.hash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Position, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 file_id = 2; */
        if (message.fileId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.fileId);
        /* int64 tape_id = 3; */
        if (message.tapeId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.tapeId);
        /* string path = 4; */
        if (message.path !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.path);
        /* int64 mode = 17; */
        if (message.mode !== 0n)
            writer.tag(17, WireType.Varint).int64(message.mode);
        /* int64 mod_time = 18; */
        if (message.modTime !== 0n)
            writer.tag(18, WireType.Varint).int64(message.modTime);
        /* int64 write_time = 19; */
        if (message.writeTime !== 0n)
            writer.tag(19, WireType.Varint).int64(message.writeTime);
        /* int64 size = 20; */
        if (message.size !== 0n)
            writer.tag(20, WireType.Varint).int64(message.size);
        /* bytes hash = 21; */
        if (message.hash.length)
            writer.tag(21, WireType.LengthDelimited).bytes(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message position.Position
 */
export const Position = new Position$Type();
