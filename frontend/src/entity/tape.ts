// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "tape.proto" (package "tape", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tape.Tape
 */
export interface Tape {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string barcode = 2;
     */
    barcode: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string encryption = 4;
     */
    encryption: string;
    /**
     * @generated from protobuf field: int64 create_time = 17;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: optional int64 destroy_time = 18;
     */
    destroyTime?: bigint;
    /**
     * @generated from protobuf field: int64 capacity_bytes = 19;
     */
    capacityBytes: bigint;
    /**
     * @generated from protobuf field: int64 writen_bytes = 20;
     */
    writenBytes: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Tape$Type extends MessageType<Tape> {
    constructor() {
        super("tape.Tape", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "barcode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "encryption", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "destroy_time", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "capacity_bytes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "writen_bytes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Tape>): Tape {
        const message = { id: 0n, barcode: "", name: "", encryption: "", createTime: 0n, capacityBytes: 0n, writenBytes: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Tape>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tape): Tape {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string barcode */ 2:
                    message.barcode = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string encryption */ 4:
                    message.encryption = reader.string();
                    break;
                case /* int64 create_time */ 17:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* optional int64 destroy_time */ 18:
                    message.destroyTime = reader.int64().toBigInt();
                    break;
                case /* int64 capacity_bytes */ 19:
                    message.capacityBytes = reader.int64().toBigInt();
                    break;
                case /* int64 writen_bytes */ 20:
                    message.writenBytes = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Tape, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string barcode = 2; */
        if (message.barcode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.barcode);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string encryption = 4; */
        if (message.encryption !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.encryption);
        /* int64 create_time = 17; */
        if (message.createTime !== 0n)
            writer.tag(17, WireType.Varint).int64(message.createTime);
        /* optional int64 destroy_time = 18; */
        if (message.destroyTime !== undefined)
            writer.tag(18, WireType.Varint).int64(message.destroyTime);
        /* int64 capacity_bytes = 19; */
        if (message.capacityBytes !== 0n)
            writer.tag(19, WireType.Varint).int64(message.capacityBytes);
        /* int64 writen_bytes = 20; */
        if (message.writenBytes !== 0n)
            writer.tag(20, WireType.Varint).int64(message.writenBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tape.Tape
 */
export const Tape = new Tape$Type();
