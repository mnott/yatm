// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "job.proto" (package "job", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { JobRestoreDisplay } from "./job_restore";
import { JobArchiveDisplay } from "./job_archive";
import { JobRestoreNextParam } from "./job_restore";
import { JobArchiveNextParam } from "./job_archive";
import { JobRestoreState } from "./job_restore";
import { JobArchiveState } from "./job_archive";
import { JobRestoreParam } from "./job_restore";
import { JobArchiveParam } from "./job_archive";
/**
 * @generated from protobuf message job.Job
 */
export interface Job {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: job.JobStatus status = 2;
     */
    status: JobStatus;
    /**
     * @generated from protobuf field: int64 priority = 3;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: int64 create_time = 4;
     */
    createTime: bigint;
    /**
     * @generated from protobuf field: int64 update_time = 5;
     */
    updateTime: bigint;
    /**
     * @generated from protobuf field: job.JobState state = 17;
     */
    state?: JobState;
}
/**
 * @generated from protobuf message job.JobParam
 */
export interface JobParam {
    /**
     * @generated from protobuf oneof: param
     */
    param: {
        oneofKind: "archive";
        /**
         * @generated from protobuf field: job_archive.JobArchiveParam archive = 1;
         */
        archive: JobArchiveParam;
    } | {
        oneofKind: "restore";
        /**
         * @generated from protobuf field: job_restore.JobRestoreParam restore = 2;
         */
        restore: JobRestoreParam;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message job.JobState
 */
export interface JobState {
    /**
     * @generated from protobuf oneof: state
     */
    state: {
        oneofKind: "archive";
        /**
         * @generated from protobuf field: job_archive.JobArchiveState archive = 1;
         */
        archive: JobArchiveState;
    } | {
        oneofKind: "restore";
        /**
         * @generated from protobuf field: job_restore.JobRestoreState restore = 2;
         */
        restore: JobRestoreState;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message job.JobNextParam
 */
export interface JobNextParam {
    /**
     * @generated from protobuf oneof: param
     */
    param: {
        oneofKind: "archive";
        /**
         * @generated from protobuf field: job_archive.JobArchiveNextParam archive = 1;
         */
        archive: JobArchiveNextParam;
    } | {
        oneofKind: "restore";
        /**
         * @generated from protobuf field: job_restore.JobRestoreNextParam restore = 2;
         */
        restore: JobRestoreNextParam;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message job.CreatableJob
 */
export interface CreatableJob {
    /**
     * @generated from protobuf field: int64 priority = 3;
     */
    priority: bigint;
    /**
     * @generated from protobuf field: job.JobParam param = 17;
     */
    param?: JobParam;
}
/**
 * @generated from protobuf message job.JobFilter
 */
export interface JobFilter {
    /**
     * @generated from protobuf field: optional job.JobStatus status = 1;
     */
    status?: JobStatus;
    /**
     * @generated from protobuf field: optional int64 limit = 33;
     */
    limit?: bigint;
    /**
     * @generated from protobuf field: optional int64 offset = 34;
     */
    offset?: bigint;
}
/**
 * @generated from protobuf message job.JobDisplay
 */
export interface JobDisplay {
    /**
     * @generated from protobuf oneof: display
     */
    display: {
        oneofKind: "archive";
        /**
         * @generated from protobuf field: job_archive.JobArchiveDisplay archive = 1;
         */
        archive: JobArchiveDisplay;
    } | {
        oneofKind: "restore";
        /**
         * @generated from protobuf field: job_restore.JobRestoreDisplay restore = 2;
         */
        restore: JobRestoreDisplay;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum job.JobStatus
 */
export enum JobStatus {
    /**
     * @generated from protobuf enum value: DRAFT = 0;
     */
    DRAFT = 0,
    /**
     * dependencies not satisfied
     *
     * @generated from protobuf enum value: NOT_READY = 1;
     */
    NOT_READY = 1,
    /**
     * waiting in queue
     *
     * @generated from protobuf enum value: PENDING = 2;
     */
    PENDING = 2,
    /**
     * @generated from protobuf enum value: PROCESSING = 3;
     */
    PROCESSING = 3,
    /**
     * @generated from protobuf enum value: COMPLETED = 4;
     */
    COMPLETED = 4,
    /**
     * @generated from protobuf enum value: FAILED = 255;
     */
    FAILED = 255
}
// @generated message type with reflection information, may provide speed optimized methods
class Job$Type extends MessageType<Job> {
    constructor() {
        super("job.Job", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["job.JobStatus", JobStatus] },
            { no: 3, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "update_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "state", kind: "message", T: () => JobState }
        ]);
    }
    create(value?: PartialMessage<Job>): Job {
        const message = { id: 0n, status: 0, priority: 0n, createTime: 0n, updateTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Job>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Job): Job {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* job.JobStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* int64 priority */ 3:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* int64 create_time */ 4:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* int64 update_time */ 5:
                    message.updateTime = reader.int64().toBigInt();
                    break;
                case /* job.JobState state */ 17:
                    message.state = JobState.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Job, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* job.JobStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* int64 priority = 3; */
        if (message.priority !== 0n)
            writer.tag(3, WireType.Varint).int64(message.priority);
        /* int64 create_time = 4; */
        if (message.createTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.createTime);
        /* int64 update_time = 5; */
        if (message.updateTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.updateTime);
        /* job.JobState state = 17; */
        if (message.state)
            JobState.internalBinaryWrite(message.state, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job.Job
 */
export const Job = new Job$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobParam$Type extends MessageType<JobParam> {
    constructor() {
        super("job.JobParam", [
            { no: 1, name: "archive", kind: "message", oneof: "param", T: () => JobArchiveParam },
            { no: 2, name: "restore", kind: "message", oneof: "param", T: () => JobRestoreParam }
        ]);
    }
    create(value?: PartialMessage<JobParam>): JobParam {
        const message = { param: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobParam): JobParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* job_archive.JobArchiveParam archive */ 1:
                    message.param = {
                        oneofKind: "archive",
                        archive: JobArchiveParam.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).archive)
                    };
                    break;
                case /* job_restore.JobRestoreParam restore */ 2:
                    message.param = {
                        oneofKind: "restore",
                        restore: JobRestoreParam.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).restore)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* job_archive.JobArchiveParam archive = 1; */
        if (message.param.oneofKind === "archive")
            JobArchiveParam.internalBinaryWrite(message.param.archive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* job_restore.JobRestoreParam restore = 2; */
        if (message.param.oneofKind === "restore")
            JobRestoreParam.internalBinaryWrite(message.param.restore, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job.JobParam
 */
export const JobParam = new JobParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobState$Type extends MessageType<JobState> {
    constructor() {
        super("job.JobState", [
            { no: 1, name: "archive", kind: "message", oneof: "state", T: () => JobArchiveState },
            { no: 2, name: "restore", kind: "message", oneof: "state", T: () => JobRestoreState }
        ]);
    }
    create(value?: PartialMessage<JobState>): JobState {
        const message = { state: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobState): JobState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* job_archive.JobArchiveState archive */ 1:
                    message.state = {
                        oneofKind: "archive",
                        archive: JobArchiveState.internalBinaryRead(reader, reader.uint32(), options, (message.state as any).archive)
                    };
                    break;
                case /* job_restore.JobRestoreState restore */ 2:
                    message.state = {
                        oneofKind: "restore",
                        restore: JobRestoreState.internalBinaryRead(reader, reader.uint32(), options, (message.state as any).restore)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* job_archive.JobArchiveState archive = 1; */
        if (message.state.oneofKind === "archive")
            JobArchiveState.internalBinaryWrite(message.state.archive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* job_restore.JobRestoreState restore = 2; */
        if (message.state.oneofKind === "restore")
            JobRestoreState.internalBinaryWrite(message.state.restore, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job.JobState
 */
export const JobState = new JobState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobNextParam$Type extends MessageType<JobNextParam> {
    constructor() {
        super("job.JobNextParam", [
            { no: 1, name: "archive", kind: "message", oneof: "param", T: () => JobArchiveNextParam },
            { no: 2, name: "restore", kind: "message", oneof: "param", T: () => JobRestoreNextParam }
        ]);
    }
    create(value?: PartialMessage<JobNextParam>): JobNextParam {
        const message = { param: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobNextParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobNextParam): JobNextParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* job_archive.JobArchiveNextParam archive */ 1:
                    message.param = {
                        oneofKind: "archive",
                        archive: JobArchiveNextParam.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).archive)
                    };
                    break;
                case /* job_restore.JobRestoreNextParam restore */ 2:
                    message.param = {
                        oneofKind: "restore",
                        restore: JobRestoreNextParam.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).restore)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobNextParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* job_archive.JobArchiveNextParam archive = 1; */
        if (message.param.oneofKind === "archive")
            JobArchiveNextParam.internalBinaryWrite(message.param.archive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* job_restore.JobRestoreNextParam restore = 2; */
        if (message.param.oneofKind === "restore")
            JobRestoreNextParam.internalBinaryWrite(message.param.restore, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job.JobNextParam
 */
export const JobNextParam = new JobNextParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatableJob$Type extends MessageType<CreatableJob> {
    constructor() {
        super("job.CreatableJob", [
            { no: 3, name: "priority", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "param", kind: "message", T: () => JobParam }
        ]);
    }
    create(value?: PartialMessage<CreatableJob>): CreatableJob {
        const message = { priority: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatableJob>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatableJob): CreatableJob {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 priority */ 3:
                    message.priority = reader.int64().toBigInt();
                    break;
                case /* job.JobParam param */ 17:
                    message.param = JobParam.internalBinaryRead(reader, reader.uint32(), options, message.param);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatableJob, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 priority = 3; */
        if (message.priority !== 0n)
            writer.tag(3, WireType.Varint).int64(message.priority);
        /* job.JobParam param = 17; */
        if (message.param)
            JobParam.internalBinaryWrite(message.param, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job.CreatableJob
 */
export const CreatableJob = new CreatableJob$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobFilter$Type extends MessageType<JobFilter> {
    constructor() {
        super("job.JobFilter", [
            { no: 1, name: "status", kind: "enum", opt: true, T: () => ["job.JobStatus", JobStatus] },
            { no: 33, name: "limit", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 34, name: "offset", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<JobFilter>): JobFilter {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobFilter): JobFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional job.JobStatus status */ 1:
                    message.status = reader.int32();
                    break;
                case /* optional int64 limit */ 33:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* optional int64 offset */ 34:
                    message.offset = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional job.JobStatus status = 1; */
        if (message.status !== undefined)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* optional int64 limit = 33; */
        if (message.limit !== undefined)
            writer.tag(33, WireType.Varint).int64(message.limit);
        /* optional int64 offset = 34; */
        if (message.offset !== undefined)
            writer.tag(34, WireType.Varint).int64(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job.JobFilter
 */
export const JobFilter = new JobFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobDisplay$Type extends MessageType<JobDisplay> {
    constructor() {
        super("job.JobDisplay", [
            { no: 1, name: "archive", kind: "message", oneof: "display", T: () => JobArchiveDisplay },
            { no: 2, name: "restore", kind: "message", oneof: "display", T: () => JobRestoreDisplay }
        ]);
    }
    create(value?: PartialMessage<JobDisplay>): JobDisplay {
        const message = { display: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobDisplay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobDisplay): JobDisplay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* job_archive.JobArchiveDisplay archive */ 1:
                    message.display = {
                        oneofKind: "archive",
                        archive: JobArchiveDisplay.internalBinaryRead(reader, reader.uint32(), options, (message.display as any).archive)
                    };
                    break;
                case /* job_restore.JobRestoreDisplay restore */ 2:
                    message.display = {
                        oneofKind: "restore",
                        restore: JobRestoreDisplay.internalBinaryRead(reader, reader.uint32(), options, (message.display as any).restore)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobDisplay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* job_archive.JobArchiveDisplay archive = 1; */
        if (message.display.oneofKind === "archive")
            JobArchiveDisplay.internalBinaryWrite(message.display.archive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* job_restore.JobRestoreDisplay restore = 2; */
        if (message.display.oneofKind === "restore")
            JobRestoreDisplay.internalBinaryWrite(message.display.restore, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job.JobDisplay
 */
export const JobDisplay = new JobDisplay$Type();
