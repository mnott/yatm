// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "job_restore.proto" (package "job_restore", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CopyStatus } from "./copy_status";
/**
 * @generated from protobuf message job_restore.JobParamRestore
 */
export interface JobParamRestore {
    /**
     * @generated from protobuf field: repeated int64 file_ids = 1;
     */
    fileIds: bigint[];
}
/**
 * @generated from protobuf message job_restore.JobRestoreNextParam
 */
export interface JobRestoreNextParam {
    /**
     * @generated from protobuf oneof: param
     */
    param: {
        oneofKind: "waitForTape";
        /**
         * @generated from protobuf field: job_restore.JobRestoreWaitForTapeParam WaitForTape = 1 [json_name = "WaitForTape"];
         */
        waitForTape: JobRestoreWaitForTapeParam;
    } | {
        oneofKind: "copying";
        /**
         * @generated from protobuf field: job_restore.JobRestoreCopyingParam Copying = 2 [json_name = "Copying"];
         */
        copying: JobRestoreCopyingParam;
    } | {
        oneofKind: "finished";
        /**
         * @generated from protobuf field: job_restore.JobRestoreFinishedParam Finished = 255 [json_name = "Finished"];
         */
        finished: JobRestoreFinishedParam;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message job_restore.JobRestoreWaitForTapeParam
 */
export interface JobRestoreWaitForTapeParam {
}
/**
 * @generated from protobuf message job_restore.JobRestoreCopyingParam
 */
export interface JobRestoreCopyingParam {
    /**
     * @generated from protobuf field: string device = 1;
     */
    device: string;
}
/**
 * @generated from protobuf message job_restore.JobRestoreFinishedParam
 */
export interface JobRestoreFinishedParam {
}
/**
 * @generated from protobuf message job_restore.FileRestoreState
 */
export interface FileRestoreState {
    /**
     * @generated from protobuf field: int64 file_id = 1;
     */
    fileId: bigint;
    /**
     * @generated from protobuf field: copy_status.CopyStatus status = 2;
     */
    status: CopyStatus;
    /**
     * @generated from protobuf field: int64 tape_id = 17;
     */
    tapeId: bigint;
    /**
     * @generated from protobuf field: int64 position_id = 18;
     */
    positionId: bigint;
    /**
     * @generated from protobuf field: repeated string path_in_tape = 19;
     */
    pathInTape: string[];
}
/**
 * @generated from protobuf message job_restore.JobStateRestore
 */
export interface JobStateRestore {
    /**
     * @generated from protobuf field: job_restore.JobRestoreStep step = 1;
     */
    step: JobRestoreStep;
    /**
     * @generated from protobuf field: repeated job_restore.FileRestoreState files = 2;
     */
    files: FileRestoreState[];
}
/**
 * @generated from protobuf message job_restore.JobDisplayRestore
 */
export interface JobDisplayRestore {
    /**
     * @generated from protobuf field: int64 copyedBytes = 1;
     */
    copyedBytes: bigint;
    /**
     * @generated from protobuf field: int64 copyedFiles = 2;
     */
    copyedFiles: bigint;
    /**
     * @generated from protobuf field: int64 totalBytes = 3;
     */
    totalBytes: bigint;
    /**
     * @generated from protobuf field: int64 totalFiles = 4;
     */
    totalFiles: bigint;
    /**
     * @generated from protobuf field: bytes logs = 17;
     */
    logs: Uint8Array;
}
/**
 * @generated from protobuf enum job_restore.JobRestoreStep
 */
export enum JobRestoreStep {
    /**
     * @generated from protobuf enum value: Pending = 0;
     */
    Pending = 0,
    /**
     * @generated from protobuf enum value: WaitForTape = 1;
     */
    WaitForTape = 1,
    /**
     * @generated from protobuf enum value: Copying = 2;
     */
    Copying = 2,
    /**
     * @generated from protobuf enum value: Finished = 255;
     */
    Finished = 255
}
// @generated message type with reflection information, may provide speed optimized methods
class JobParamRestore$Type extends MessageType<JobParamRestore> {
    constructor() {
        super("job_restore.JobParamRestore", [
            { no: 1, name: "file_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<JobParamRestore>): JobParamRestore {
        const message = { fileIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobParamRestore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobParamRestore): JobParamRestore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 file_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fileIds.push(reader.int64().toBigInt());
                    else
                        message.fileIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobParamRestore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 file_ids = 1; */
        if (message.fileIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.fileIds.length; i++)
                writer.int64(message.fileIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job_restore.JobParamRestore
 */
export const JobParamRestore = new JobParamRestore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobRestoreNextParam$Type extends MessageType<JobRestoreNextParam> {
    constructor() {
        super("job_restore.JobRestoreNextParam", [
            { no: 1, name: "WaitForTape", kind: "message", jsonName: "WaitForTape", oneof: "param", T: () => JobRestoreWaitForTapeParam },
            { no: 2, name: "Copying", kind: "message", jsonName: "Copying", oneof: "param", T: () => JobRestoreCopyingParam },
            { no: 255, name: "Finished", kind: "message", jsonName: "Finished", oneof: "param", T: () => JobRestoreFinishedParam }
        ]);
    }
    create(value?: PartialMessage<JobRestoreNextParam>): JobRestoreNextParam {
        const message = { param: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobRestoreNextParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobRestoreNextParam): JobRestoreNextParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* job_restore.JobRestoreWaitForTapeParam WaitForTape = 1 [json_name = "WaitForTape"];*/ 1:
                    message.param = {
                        oneofKind: "waitForTape",
                        waitForTape: JobRestoreWaitForTapeParam.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).waitForTape)
                    };
                    break;
                case /* job_restore.JobRestoreCopyingParam Copying = 2 [json_name = "Copying"];*/ 2:
                    message.param = {
                        oneofKind: "copying",
                        copying: JobRestoreCopyingParam.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).copying)
                    };
                    break;
                case /* job_restore.JobRestoreFinishedParam Finished = 255 [json_name = "Finished"];*/ 255:
                    message.param = {
                        oneofKind: "finished",
                        finished: JobRestoreFinishedParam.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).finished)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobRestoreNextParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* job_restore.JobRestoreWaitForTapeParam WaitForTape = 1 [json_name = "WaitForTape"]; */
        if (message.param.oneofKind === "waitForTape")
            JobRestoreWaitForTapeParam.internalBinaryWrite(message.param.waitForTape, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* job_restore.JobRestoreCopyingParam Copying = 2 [json_name = "Copying"]; */
        if (message.param.oneofKind === "copying")
            JobRestoreCopyingParam.internalBinaryWrite(message.param.copying, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* job_restore.JobRestoreFinishedParam Finished = 255 [json_name = "Finished"]; */
        if (message.param.oneofKind === "finished")
            JobRestoreFinishedParam.internalBinaryWrite(message.param.finished, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job_restore.JobRestoreNextParam
 */
export const JobRestoreNextParam = new JobRestoreNextParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobRestoreWaitForTapeParam$Type extends MessageType<JobRestoreWaitForTapeParam> {
    constructor() {
        super("job_restore.JobRestoreWaitForTapeParam", []);
    }
    create(value?: PartialMessage<JobRestoreWaitForTapeParam>): JobRestoreWaitForTapeParam {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobRestoreWaitForTapeParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobRestoreWaitForTapeParam): JobRestoreWaitForTapeParam {
        return target ?? this.create();
    }
    internalBinaryWrite(message: JobRestoreWaitForTapeParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job_restore.JobRestoreWaitForTapeParam
 */
export const JobRestoreWaitForTapeParam = new JobRestoreWaitForTapeParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobRestoreCopyingParam$Type extends MessageType<JobRestoreCopyingParam> {
    constructor() {
        super("job_restore.JobRestoreCopyingParam", [
            { no: 1, name: "device", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JobRestoreCopyingParam>): JobRestoreCopyingParam {
        const message = { device: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobRestoreCopyingParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobRestoreCopyingParam): JobRestoreCopyingParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device */ 1:
                    message.device = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobRestoreCopyingParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device = 1; */
        if (message.device !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.device);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job_restore.JobRestoreCopyingParam
 */
export const JobRestoreCopyingParam = new JobRestoreCopyingParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobRestoreFinishedParam$Type extends MessageType<JobRestoreFinishedParam> {
    constructor() {
        super("job_restore.JobRestoreFinishedParam", []);
    }
    create(value?: PartialMessage<JobRestoreFinishedParam>): JobRestoreFinishedParam {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobRestoreFinishedParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobRestoreFinishedParam): JobRestoreFinishedParam {
        return target ?? this.create();
    }
    internalBinaryWrite(message: JobRestoreFinishedParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job_restore.JobRestoreFinishedParam
 */
export const JobRestoreFinishedParam = new JobRestoreFinishedParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FileRestoreState$Type extends MessageType<FileRestoreState> {
    constructor() {
        super("job_restore.FileRestoreState", [
            { no: 1, name: "file_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["copy_status.CopyStatus", CopyStatus] },
            { no: 17, name: "tape_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "position_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "path_in_tape", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FileRestoreState>): FileRestoreState {
        const message = { fileId: 0n, status: 0, tapeId: 0n, positionId: 0n, pathInTape: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FileRestoreState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileRestoreState): FileRestoreState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 file_id */ 1:
                    message.fileId = reader.int64().toBigInt();
                    break;
                case /* copy_status.CopyStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* int64 tape_id */ 17:
                    message.tapeId = reader.int64().toBigInt();
                    break;
                case /* int64 position_id */ 18:
                    message.positionId = reader.int64().toBigInt();
                    break;
                case /* repeated string path_in_tape */ 19:
                    message.pathInTape.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileRestoreState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 file_id = 1; */
        if (message.fileId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fileId);
        /* copy_status.CopyStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* int64 tape_id = 17; */
        if (message.tapeId !== 0n)
            writer.tag(17, WireType.Varint).int64(message.tapeId);
        /* int64 position_id = 18; */
        if (message.positionId !== 0n)
            writer.tag(18, WireType.Varint).int64(message.positionId);
        /* repeated string path_in_tape = 19; */
        for (let i = 0; i < message.pathInTape.length; i++)
            writer.tag(19, WireType.LengthDelimited).string(message.pathInTape[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job_restore.FileRestoreState
 */
export const FileRestoreState = new FileRestoreState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobStateRestore$Type extends MessageType<JobStateRestore> {
    constructor() {
        super("job_restore.JobStateRestore", [
            { no: 1, name: "step", kind: "enum", T: () => ["job_restore.JobRestoreStep", JobRestoreStep] },
            { no: 2, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FileRestoreState }
        ]);
    }
    create(value?: PartialMessage<JobStateRestore>): JobStateRestore {
        const message = { step: 0, files: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobStateRestore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobStateRestore): JobStateRestore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* job_restore.JobRestoreStep step */ 1:
                    message.step = reader.int32();
                    break;
                case /* repeated job_restore.FileRestoreState files */ 2:
                    message.files.push(FileRestoreState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobStateRestore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* job_restore.JobRestoreStep step = 1; */
        if (message.step !== 0)
            writer.tag(1, WireType.Varint).int32(message.step);
        /* repeated job_restore.FileRestoreState files = 2; */
        for (let i = 0; i < message.files.length; i++)
            FileRestoreState.internalBinaryWrite(message.files[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job_restore.JobStateRestore
 */
export const JobStateRestore = new JobStateRestore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobDisplayRestore$Type extends MessageType<JobDisplayRestore> {
    constructor() {
        super("job_restore.JobDisplayRestore", [
            { no: 1, name: "copyedBytes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "copyedFiles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "totalBytes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "totalFiles", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "logs", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<JobDisplayRestore>): JobDisplayRestore {
        const message = { copyedBytes: 0n, copyedFiles: 0n, totalBytes: 0n, totalFiles: 0n, logs: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JobDisplayRestore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobDisplayRestore): JobDisplayRestore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 copyedBytes */ 1:
                    message.copyedBytes = reader.int64().toBigInt();
                    break;
                case /* int64 copyedFiles */ 2:
                    message.copyedFiles = reader.int64().toBigInt();
                    break;
                case /* int64 totalBytes */ 3:
                    message.totalBytes = reader.int64().toBigInt();
                    break;
                case /* int64 totalFiles */ 4:
                    message.totalFiles = reader.int64().toBigInt();
                    break;
                case /* bytes logs */ 17:
                    message.logs = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobDisplayRestore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 copyedBytes = 1; */
        if (message.copyedBytes !== 0n)
            writer.tag(1, WireType.Varint).int64(message.copyedBytes);
        /* int64 copyedFiles = 2; */
        if (message.copyedFiles !== 0n)
            writer.tag(2, WireType.Varint).int64(message.copyedFiles);
        /* int64 totalBytes = 3; */
        if (message.totalBytes !== 0n)
            writer.tag(3, WireType.Varint).int64(message.totalBytes);
        /* int64 totalFiles = 4; */
        if (message.totalFiles !== 0n)
            writer.tag(4, WireType.Varint).int64(message.totalFiles);
        /* bytes logs = 17; */
        if (message.logs.length)
            writer.tag(17, WireType.LengthDelimited).bytes(message.logs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message job_restore.JobDisplayRestore
 */
export const JobDisplayRestore = new JobDisplayRestore$Type();
